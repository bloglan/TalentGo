@model  ArchiveCategory
@{
	ViewBag.Title = "管理报名资料";
}

<h2>管理报名资料</h2>
<hr />
<ul>
	<li>
		上传要求：1.仅支持jpg和png格式图片  2.图片大小不小于100KB，不超过2MB  3.图像宽度和高度不低于1024像素 4.图片要求字迹图像清晰 5.图片可通过扫描或拍照获取
	</li>
</ul>
<hr />

@using (Html.BeginForm())
{
	@Html.AntiForgeryToken()

	<div class="form-horizontal">
		@Html.ValidationSummary(true, "", new { @class = "text-danger" })
		<div class="form-group">
			@Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.CreatedBy, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.CreatedBy, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.CreatedBy, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.Enabled, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				<div class="checkbox">
					@Html.EditorFor(model => model.Enabled)
					@Html.ValidationMessageFor(model => model.Enabled, "", new { @class = "text-danger" })
				</div>
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.Requirements, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.Requirements, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.Requirements, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.SampleImage, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="panel-body">
				@*我已将此部分代码更改。并进行了简化，实际上，我们无需用Html.Action或Html.Partial来调用子部件，直接将GetImageObject中的内容写到这个位置上*@
				@* 请仔细看，这里我重新调整了输出标记的行为，因此也不再需要js模板的支持，另外，为图片筐和上传筐命名了id，用jquery来寻找就非常简单了。 *@
				@*@Html.Action("GetImageObject", new { id = Model.id })*@


				<div id="ImgContainer" class="col-md-3 img-thumbnail" style="@(Model.SampleImage == null ? "display: none;": "display: block;" )">
					<img id="uploadedImg" src="@(Model.SampleImage != null ? Url.Action("GetPicture", "BaseData" , new { eaid = Model.id }) : "#")" class="img-responsive" />
					<div class="caption">
					</div>
					<p><button type="button" class="btn btn-default btn-sm" onclick="return RemoveFile(this);" data-eaid="@Model.id">移除</button></p>
				</div>



				<div id="UploadCtrl" class="col-md-3 img-thumbnail" style="@(Model.SampleImage != null ? "display: none;": "display: block;" )">
					<span class="btn btn-success fileinput-button">
						<i class="glyphicon glyphicon-plus"></i>
						<span>上传文件</span>
						<!-- The file input field used as target for the file upload widget -->
						<input id="fileupload" type="file" name="files[]">
					</span>
				</div>



			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.MinFileSize, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.MinFileSize, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.MinFileSize, "", new { @class = "text-danger" })
			</div>
		</div>
		<div class="form-group">
			@Html.LabelFor(model => model.MaxFileSize, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.MaxFileSize, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.MaxFileSize, "", new { @class = "text-danger" })
			</div>
		</div>
		<div class="form-group">
			@Html.LabelFor(model => model.MinWidth, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.MinWidth, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.MinWidth, "", new { @class = "text-danger" })
			</div>
		</div>
		<div class="form-group">
			@Html.LabelFor(model => model.MaxWidth, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.MaxWidth, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.MaxWidth, "", new { @class = "text-danger" })
			</div>
		</div>
		<div class="form-group">
			@Html.LabelFor(model => model.MinHeight, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.MinHeight, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.MinHeight, "", new { @class = "text-danger" })
			</div>
		</div>
		<div class="form-group">
			@Html.LabelFor(model => model.MaxHeight, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.MaxHeight, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.MaxHeight, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			<div class="col-md-offset-2 col-md-10">
				<input type="submit" value="保存" class="btn btn-default" />
			</div>
		</div>
	</div>
}



@*@Html.ActionLink("返回报名首页", "Index", null, new { @class = "btn btn-default" })*@




@section HeadScripts{

	@Styles.Render("~/Content/jqueryfileupload")

}

@section Scripts {


	@Scripts.Render("~/bundles/jqueryui")
	@Scripts.Render("~/bundles/jqueryfileupload")

	<script>
		$(function () {
			$.ajaxSetup({ cache: false });
		});

		$(function () {
			'use strict';
			$("#fileupload").fileupload({
				url: "@Url.Action("UploadFiles", new { acid = Model.id })",
				dataType: 'json',
				progress: function (e, data) {
					$(this).prevAll("span").text("正在传送...");
					//alert("");
				},
				done: function (e, data) {
					//当传送完成时，应如何显示。
					//alert("FileUpload");
					$(this).prevAll("span").text("上传文件");

					if (data.result.id == 0) {
						alert("传送错误。" + data.result.name);
						return;
					}
					//重新刷新img以使其能正确显示。
					$("#uploadedImg").attr("src", "@Url.Action("GetPicture", "BaseData", new { eaid = Model.id })");

					$("#ImgContainer").css("display", "block");
					$("#UploadCtrl").css("display", "none");

				},
				fail: function (e, data) {
					//
					$(this).prevAll("span").text("上传文件");
					alert("传送文件出现了错误，可能文件过大，请重新选择尝试。");
				}
			}).prop('disabled', !$.support.fileInput)
						.parent().addClass($.support.fileInput ? undefined : 'disabled');
		});

		function RemoveFile(ele) {
			if (confirm("确定要删除这个文档吗？")) {
				var eaidddd = $(ele).data("eaid");
				$.getJSON("@Url.Action("RemoveFile")", { eaid: eaidddd }, function (data, status, xhr) {
					if (data.code != 0)
						alert(data.msg);
					else {
						//
						$("#uploadedImg").attr("src", "#");
						$("#ImgContainer").css("display", "none");
						$("#UploadCtrl").css("display", "block");
					}
				});
			}
		}
	</script>

}